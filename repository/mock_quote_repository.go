// Code generated by MockGen. DO NOT EDIT.
// Source: repository/quote_repository_interface.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	model "github.com/dilaragorum/api-quote-reverser/model"
	gomock "github.com/golang/mock/gomock"
)

// MockIQuoteRepository is a mock of IQuoteRepository interface.
type MockIQuoteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIQuoteRepositoryMockRecorder
}

// MockIQuoteRepositoryMockRecorder is the mock recorder for MockIQuoteRepository.
type MockIQuoteRepositoryMockRecorder struct {
	mock *MockIQuoteRepository
}

// NewMockIQuoteRepository creates a new mock instance.
func NewMockIQuoteRepository(ctrl *gomock.Controller) *MockIQuoteRepository {
	mock := &MockIQuoteRepository{ctrl: ctrl}
	mock.recorder = &MockIQuoteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIQuoteRepository) EXPECT() *MockIQuoteRepositoryMockRecorder {
	return m.recorder
}

// GetQuotes mocks base method.
func (m *MockIQuoteRepository) GetQuotes() ([]model.Quote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuotes")
	ret0, _ := ret[0].([]model.Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuotes indicates an expected call of GetQuotes.
func (mr *MockIQuoteRepositoryMockRecorder) GetQuotes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuotes", reflect.TypeOf((*MockIQuoteRepository)(nil).GetQuotes))
}
